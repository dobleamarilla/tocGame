Interfaces Comunicación Sat:
----------------------------

H.Comm.init(callback, satelliteRegistrationHandler)

satelliteRegistrationHandler(sat(*1), oldSat) : 
	se llama en el Host cada vez que se registra un satelite
	devuelve true si se acepta el satelite
	oldSat: si habia un sat registrado con el mismo id.
	Interface Sat(*1): (interface para comunicarse con sat, internamente es la propiedad interfaceApp)
		getId
		isLocal : true si es satelite local (sat en Host)
		isValid : sat no destruido
		checkReadyComm : HS espera mensaje
		readyComm
		getTime
		diffTime
		getAgeLastCom
		destroy
		createObj(idObj, createObjSat, createObjHost, callback, availableCommHandler)
			crea un objeto de comunicación (entre host y Sat).
			Se usa para llamar a una funcion javascript desde host ,ejecutarse en Sat y devolver
			el resultado al Host. Y viceversa (Sat a Host).
			idObj : identificador(string) único. Identifica a este objeto. 
			createObjSat:
				function o [function, arg1, ..., argN]
				se envia la función al Sat y se ejecuta. 
				El primer parametro es una interface al objeto de comunicación (sat a host) (*2),
				el resto arg1, ..., argN.
				devuelve un objeto con las funciones que se pueden ejecutar en el objeto Sat.
			createObjHost:
				function o [function, arg1, ..., argN]
				se ejecuta en Host. 
				El primer parametro es una interface al objeto de comunición (host a Sat) (*3), 
				el resto arg1, ..., argN
				devuelve un objeto con las funciones que se pueden ejecutar en el objeto Host.
			callback:
				se ejecuta cuando se ha creado el objeto
			availableCommHandler:
				el canal HS esta libre
			
			CreateObj devuelve una interface al objeto comunición (host a Sat) (*3)	
		sendScript(s, callback) : 
			Envia un script (s) al Sat y hace eval(script);
			Estos scripts no se pueden debugar porque no los contiene ningun archivo.
		sendFunctionExecute(s, callback) :
			Envia una functión y la ejecuta en el Sat: eval("(s.toString())()")
			Esta función no se pueden debugar porque no los contiene ningun archivo.
		sendObjectAssign(name, obj, callback) :
			Asigna a la variable del Sat(name) el objeto (obj).
			El objeto puede contener propiedades que sean functions y tambien se envian.
			Es similar a json pero se pueden enviar funciones.
		data : 
			datos que puede usar la aplicación para guardar datos relativos a este Sat y
			así ahorrarse de mantener una estructura asociada similar.
				
				
Interface al objeto de comunicación en Host (*3): (normalmente se denomina objSat)
	getId : 
		id del objeto de comunicación
	isValid : 
		objeto no destruido
	setMaxAge : 
	call(func, args, callback) :
		ejecuta la función del sat con nombre(func) y los argumentos (args en array)
		callback(ret, er, time, timeToSat) : 
			funcion que recibe el resultado
			ret : retorno de la función
			er : mensaje de error(string), puede producirse por una excepción en la función o por maxAge.
			time : tiempo desde la llamada
			timeToSat : tiempo que tardo en ejecutarse en Sat.
	destroy :
		destruir objeto
	data : 
		datos que puede usar la aplicación para guardar datos relativos a este objeto de comunicación y
		así ahorrarse de mantener una estructura asociada similar.
	getSat :
		interface de Sat(*1)
	getAsyncRet :
	getPendingResp : 
	checkReadyComm : 
	readyComm : 


Interface al objeto de comunicación en Sat (*2): (normalmente se denomina host)
	getId : 
		id del objeto de comunicación
	getIdSat : 
		id del Sat
	isLocal : 
		satelite local es el que se ejcuta en el host
	isValid : 
		no esta destruido
	checkReadyComm : 
	readyComm : 
	call(func, args, callback)
		ejecuta la función del host con nombre(func) y los argumentos (args en array)
		callback(ret, er, time, timeToHost) : 
			funcion que recibe el resultado
			ret : retorno de la función
			er : mensaje de error(string), puede producirse por una excepción en la función.
			time : tiempo desde la llamada
			timeToHost : tiempo que tardo en ejecutarse en Host.
	ageQuestion :
	getHostTime :
	getTs :
	getAgeLastCom :
	getSatTime :
	data :
		datos que puede usar la aplicación para guardar datos relativos a este objeto de comunicación y
		así ahorrarse de mantener una estructura asociada similar.
	getAsyncRet : 
	getPendingResp : 
	
	
				
