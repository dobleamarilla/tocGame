HostGTpv visual basic

tipos de datos de visual basic compatibles con los de javascript (json.vb)
	javascript                visual basic
		object {}                jsObject , Dictionary(Of String, Object), IDictionary
		array  []                jsArray , List(Of Object), IEnumerable
		numeric                  Double (el único tipo numerico de js es Double)
		string                   String
		boolean                  Boolean
		null                     Nothing
		function                 jsFunction
		
		
H_Articles
	Sub actualize( 'actualizar datos de articulos en satelites
		articles() As CArticle, 
		families() As CFamilia, 
		codisBarres() As CCodiBarres)
		
	'datos similares a la base de datos	
	Class CArticle
		codi As Double
		nom As String
		preu As Double
		esSumable As Boolean
		familia As String
	End Class

	Class CFamilia
		nom As String
		pare As String
		nivell As Integer
	End Class

	Class CCodiBarres
		codi As String
		codiArt As Double
	End Class


H_DosNivells	'filtro de ambients
	Sub actualize(dosNivells() As CDosNivells)
	
	'datos similares a la base de datos
	Class CDosNivells
		tag As String    'incluye ambients que empiezan por tag en este filtro
		texte As String  'texto a mostrar para este filtro
	End Class
	
	
H_Dependentes	
	Sub actualize(dependentes() As CDependenta, codiActives() As Double)
		dependentes: todas las dependentes
		codiActives: codi de dependenta que ha entrado (esta activa)
    Sub addActiva(ByVal codi As Double)      'entra a trabajar
	Sub delActiva(ByVal codi As Double)      'deja de trabajar
	
	'eventos producidos por modificación de datos en satelite
	Event evActivesActualized(codiActives() As Double) ' dependentes actives a cambiado (add o del)
	Event evAddActive(codi As Double) ' entra a trabajar
	Event evDelActive(codi As Double) ' deja de trabajar
	
	'datos similares a la base de datos
	Class CDependenta
		codi As Double
		nom As String
		password As String
		tipusTreballador As String
	End Class
	
	
H_Mesas       'mesas validas (todas las mesas, tengan o no tengan comanda)
	Sub actualize(ByVal comedores() As CComedor)
	
    Class CComedor    'comedor
		name As String
		mesas() As CMesa
	End Class
	Class CMesa      'mesa
		name As String
	End Class
 
 
H_Teclats     'teclats de ambients
	Sub actualize(teclats() As CAmbient)
  
	'eventos producidos por modificación de datos en satelite
	Event evActualize(ByVal teclats() As CAmbient)
	
	Const nButtonsPerAmbient = 6 * 6

	'datos similares a la base de datos
	Class CAmbient
		ambient As String
		buttons(nButtonsPerAmbient - 1) As CButton
	End Class
	Class CButton
		codi As Double
		color As Double
	End Class
	
	
H_ConceptosEntrega	   'nombres de conecptos para entradas(O) y salidas(A)
	Sub actualize(conceptosEntrega As Dictionary(Of String, String()))
	
	
H_Caja
	Sub abrir(Optional canvi() As Double = Nothing) 'abrir caja
 	Sub cerrar(Optional canvi() As Double = Nothing) 'cerrar caja
 	Sub movimiento(add As Boolean, tipoMov As String, mov As jsObject)
	
	'eventos producidos por modificación de datos en satelite
	Event evAbrir(codiDep As Double, canvi() As Double)
	Event evCerrar(codiDep As Double, canvi() As Double)
	Event evMovimiento(add As Boolean, tipoMov As String, mov As jsObject)

	canvi : array numero de monedas de cada tipo del array clasesMonedas
	clasesMonedas() As Double = {0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, 200, 500}
	mov : es jsObject y los campos dependen de cada movimiento. (No se usa en camarero)
	
H_Comandes
	actualizeComanda(idComanda As String, c As CComanda)
	Function getIdsComanda() As String()  'devuelve una array con los ids de comanda
	Function getComanda(ByVal idComanda As String) As CComanda  'devuelve comanda actual con ese id o Nothing si no existe
 
	'eventos producidos por ordenes desde el satelite
	Event evComandaActualized(idComanda As String, ByVal c As CComanda)
	Event evCobrarComanda(idComanda As String, ByVal c As CComanda)
	Event evPrintTicket(idComanda As String, ByVal tsPrint As Double?)

	Class CComanda
		id As String                  'id de la comanda
		ts As Double                  'timeStamp apertura comanda
		ver As Double                 'versión de esta comanda
		nextIdItem As Double          'idItem para el siguiente item añadido
		fOpen As Boolean              'comanda abierta 
		fCobrada As Boolean           'comanda cobrada
		props As jsObject             'propiedades de la comanda
		items As New List(Of CItem)   'lista de items
	End Class

	Class CItem
		id As Double                  'id item
		n As Double                   'número de unidades  
		codi As Double                'codigo de producto
		preu As Double                'precio por unidad
		esS As Boolean                'es sumable 
		ord As Double                 'orden de servir 
	End Class

	id de Comanda
		para comandas de dependenta: D_codiDep (ej: D_208, para la dependentacon codi 208)
		para mesas: M_numMesa (ej: M_17, para la mesa 17)
	timeStamp comanda
		al abrir comanda se le asigna un timeStamp y no canvia hasta que vuelve a abrirse
	versión comanda
		empieza en 1 y se incrementa en uno cuando se produce un cambio en la comanda. Utilizada para
		la comunicación con satelites. 
		Cuando un satelite realiza una modificación en la comanda incrementa su versión local. Si llega
		una actualización con una versión igual o inferior, la rechaza porque no refleja el cambio realizado y
		espera a que llege la actualización siguiente.
	nextIdItem
		los items de la comanda tienen un id unico, este el id para el siguiente iteme añadido
	fOpen (boolean)
		si es false no se pueden añadir items
	fCobrada (boolean)
		si es true, la comanda estara cerrada fOpen=false, y los items seran validos, o sea, se podra imprimir
		un ticket con esos datos
	props
		propiedades de la comanda: (es un jsObject)
			codiDep: codiDependenta en apertura de comanda
			en un futuro pueden añadirse más como: número de comensales, etc.
	items 
		lista de items(linea de comanda: núm articulos, codi de articulo)
		
		
	item
		id
			cada item tiene un id diferente > 0.
			Cuando un satelite añade un item le asigna un id local < 0, el host al recibirlo le asigna un id > 0
			(id de host) que sera compartido con los otros satelites y con el satelite que ha creado el item.
			Aunque internamente, este satelite, seguira usando su id local, para evitar incongruencias con la 
			aplicación que muestra la comanda en ese satelite.
			El id que asigna el host es nextIdItem. Despues incrementa en 1 nextIdItem.
		n
			número de unidades (si es 0 indica que el item se ha borrado)
		codi 
			codi articulo
		preu 
			precio unitario (podria cambiar por alguna actualización de datos por el servidor en medio de una comanda).
		esS (boolean)
			es sumable
		ord
			orden de servir
			(1,2,3) (primero, segundo y postre)
		
		
	Gestión de comanda desde la aplicaión de visual basic
		Para actualizar una comanda en el satelite: actualizeComanda(idComanda As String, c As CComanda)
		
		Para crear una comanda: new H_Comandes.CComanda(idComanda), esto crea una comanda vacia y cerrada,
			con un nuevo timeStamp
		
		Para abrir comanda fOpen=true
		
		ver: puede dejarse a 0 o no modificarse(si viene de getComanda), el host ya pondra un valor valido
		nextIdItem: el host ya pondra un valor valido
		id de item: si se añade un item , su id sera nextIdItem (si viene de getComanda)
		
		borrar un item:
			para evitar incongruencias(por ej: un satelite borra un item, pero otro realiza alguna modificación
			o incrementa n), para borrar un item se pone n=0 o se incrementa n en -n(en el caso de un satelite)


H_Main
	init(controlInvoke As satServer.delControlInvoke, Optional userGTpv As String = "user1")
		controlInvoke: debe ser addressOf Form.Invoke, Form es el form principal de la aplicación.
			Las comunicaciones con los satelites se realizan en un Thread diferente al principal. Para
			evitar que dos Threads modifiquen datos a la vez y provocar errores, el proceso de los datos
			recibidos por los satelites se realizan mediante invoke, asi las modificaciones se realizaran
			en el mismo Thread.
		userGTpv:
			user de la tabla G_GTpv.dbo.G_CLIENTES. gtpv.es en el satelite consulta esta tabla.
			
	la función init contiene los ids de Satelites validos (idsSatAllowed)


fileHandlers
	gestiona los archivos que forman la aplicacion html+javascript+css que se envia a los satelites
	los archivos se guardan en local(visual basic) en el directorio satWeb
	excepto los archivos .php que se generan dentro del hostGTpv visual basic
	Los archivos .js se han obtenido guardando la página desde un satelite que ha cargado la aplicaión desde
	un hostGTpv html+javascript
	
	

	