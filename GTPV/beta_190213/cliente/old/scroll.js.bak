H.Scripts.addLocalExec("Scroll", function() {

window.newScroll = function (arrows, nElementsScroll, options) {
	var my = {};
	var defaultOptions = {
		contentCSS : {},
		contentClass : "ui-widget-content",
		arrows : "l_r",
//		labels : { l:"l", r:"r", u:"u", d:"d" },
//		sizeArrow : "10%",
//		nElementsScroll : 6,
		initPostBody : true,
		sizeArrow : "16px",
		colorArrow : "black",
		elementCSS : {position: "relative", verticalAlign: "middle"},
		elementClass : "" //"ui-state-default",
		percDeltaIncArrow : 1,
		scrollInBlocks : true,
	};
	var opt = $.extend({}, defaultOptions, options || {});
	
	function clickArrow(e) {
		if (e.button !== 0) return;
		var delta = Math.floor(opt.percDeltaIncArrow*nElScroll);
		if (delta < 1) delta=1;
		my.redraw(idxVisibleEl+$(this).data("inc")*delta);
	}
	function label(t) {
		return opt.labels[t];
	}

	var div = $("<div>");
	this.getDiv = function() { return div; }
	
	var fHorizScr = (arrows.search(/[lr]/) != -1); 
	var woh = fHorizScr ? "width" : "height";
	var how = fHorizScr ? "height" : "width";
	var block = fHorizScr ? "inline-block" : "block";
	
	var contentDiv = $("<div>").css(opt.contentCSS).addClass(opt.contentClass);
	contentDiv.css({display: block, boxSizing: "border-box", overflow: "hidden", width: "100%", height: "100%"});
	
	function createArrow(type) {
		var types = "urdl";
		return $("<svg viewBox='0 0 100 100'>"
		        +"   <polygon points='50 17.5, 12.5 82.5, 87.5 82.5' fill='"+opt.colorArrow+"' "
				+"            transform='translate(50 50) rotate("+(types.indexOf(type)*90)+") translate(-50 -50)' />"
		        +"</svg>");
	}
	
	function createGroupArr() {
		return $("<div>").css({display: "none", verticalAlign : "middle"})
		                 .css(woh, opt.sizeGroupArrow).css(how, "100%").appendTo(div);
	}
	
	var groupsArr = [], butArrow = [];
	var grArr = null, iBut = 0;
	opt.arrows.forEach(function(typeArr) {
		if (typeArr === "_") {
			contentDiv.appendTo(div);
			grArr = null; 
		} else {	
			if (!grArr) {
				groupsArr.push(grArr = createGroupArr());
			}	
			var inc = (typeArr.search(/[lu]/) !== -1) ? -1 : 1;
			butArrow[iBut++] = $("<button>").css(woh, "100%").css(how, (opt.arrows.indexOf("_") === 1) ? "100%" : "50%")
    										.css({ padding: "0px" }).append(createArrow(typeArr))
										    .data("inc", inc).mousedown(clickArrow)
										    .appendTo(grArr);
		}							   
	});
	var resizeFunction = function() { if (isDivVisible(div)) my.redraw(); };
	Resize.add(resizeFunction, 200);


	var idxVisibleEl=0;
	var idxFirstElScroll;
	
	my.getIdxVisibleEl = function() { return idxVisibleEl; }
	var el_woh, nElScroll;
	
	my.redraw = function(_idxVisibleEl) {
		var n = opt.getNItems();	
		if (_idxVisibleEl != null) { idxVisibleEl = _idxVisibleEl; }
		if (idxVisibleEl >= n) idxVisibleEl = n-1;
		if (idxVisibleEl < 0) idxVisibleEl = 0;
		
		contentDiv.empty();
		var div_woh = div[woh(fHorizScr)]();
		var outer_woh = "outer"+woh.charAt(0).toUpperCase()+woh.slice(1);
		var bord_woh = contentDiv[outer_woh](true) - contentDiv[woh]();
		var cont_woh = div_woh-bord_woh;
	
		var model = opt.getItem(-1);
		if (model) {
			model.appendTo(contentDiv);
			el_woh = model[outerSize](true);
			model.remove();
			nElScroll = Math.floor(cont_woh/el_woh);
		} else nElScroll = opt.nElScroll;

		if (opt.sizeGroupArrow == null) {
			var butT = $("<button>").appendTo("body");
			var divT = $("<div>").css({ display: "inline-block" }).html("XX<br>XX").addClass("ui-state-default").appendTo(butT);
			opt.sizeGroupArrow = divT.height()+"px";
			butT.remove();
		}
		$(groupsArr).each(function() {
			var grArr = $(this);
			grArr.css("display", (n > nElScroll) ? blockType : "none");
			grArr.css(woh, opt.sizeGroupArrow);
			cont_woh-=grArr[outer_woh](true);
		});	
		if (model) {
			nElScroll = Math.floor(cont_woh/el_woh);
			if (nElScroll === 0) nElScroll=1; // division por zero más abajo
		} else el_woh = Math.floor(cont_woh/nElScroll);
		cont_woh = nElScroll*el_woh;
		contentDiv[woh](cont_woh+bord_woh);

		idxFirstElScroll = idxVisibleEl;
		if (scrollInBlocks) idxFirstElScroll -= idxFirstElScroll%nElScroll;

		for (var i=0, idxItem=idxFirstElScroll; (i<nElScroll) && (idxItem<n); i++, idxItem++) {
			opt.getItem(idxItem)[woh](el_woh).appendTo(contentDiv);
		}
		butArrow.forEach(function(but) {
			var disabled = ((but.data("inc") == -1) ? (idxFirstElScroll === 0) : (!(idxItem<n)));
			if (disabled) but.attr("disabled", "disabled");
			else but.removeAttr("disabled");
		}

	}

	return my;
}


function initScroll() {
	var butT = $("<button>").appendTo("body");
	var divT = $("<div>").css({ display: "inline-block" }).html("XX<br>XX").addClass("ui-state-default").appendTo(butT);
	window.gScroll.prototype.defaultOptions.sizeArrow = divT.height()+"px";
	window.gScroll.prototype.defaultOptions.colorArrow = divT.css("color");
	butT.remove();
}
initScroll();

}); // add Scripts scroll
